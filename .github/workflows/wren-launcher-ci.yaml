name: Wren Launcher CI

on:
  push:
    branches: [ main ]
    paths:
      - 'wren-launcher/**'
      - '.github/workflows/wren-launcher-ci.yaml'
  pull_request:
    types: [synchronize, labeled]
    paths:
      - 'wren-launcher/**'
      - '.github/workflows/wren-launcher-ci.yaml'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  # avoid mis-canceling the ci runs while other labels are added to the PR, so we add the label name as the condition
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.event.label.name == 'ci/launcher' && github.event.number || github.sha }}
  cancel-in-progress: true

defaults:
  run:
    working-directory: wren-launcher

jobs:
  lint-and-test:
    # run this job only if the PR is labeled with "ci/launcher" or if it's a push to main
    if: ${{ contains(github.event.pull_request.labels.*.name, 'ci/launcher') || github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache-dependency-path: wren-launcher/go.sum
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Install goimports
        run: go install golang.org/x/tools/cmd/goimports@latest
      - name: Download dependencies
        run: go mod download
      - name: Run format check
        run: |
          make fmt
          # Check if there are any formatting changes
          if [ -n "$(git diff --name-only)" ]; then
            echo "Code is not formatted properly. Please run 'make fmt' and commit the changes."
            git diff
            exit 1
          fi
      - name: Run go vet
        run: make vet
      - name: Run golangci-lint
        run: make lint
      - name: Run tests
        run: make test
      - name: Run all checks
        run: make check

  build-test:
    # run this job only if the PR is labeled with "ci/launcher" or if it's a push to main
    if: ${{ contains(github.event.pull_request.labels.*.name, 'ci/launcher') || github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache-dependency-path: wren-launcher/go.sum
      - name: Download dependencies
        run: go mod download
      - name: Test build for multiple platforms
        run: |
          # Test build for Linux AMD64
          env GOARCH=amd64 GOOS=linux CGO_ENABLED=0 go build -o dist/wren-launcher-linux-test main.go
          # Test build for Linux ARM64
          env GOARCH=arm64 GOOS=linux CGO_ENABLED=0 go build -o dist/wren-launcher-linux-arm64-test main.go
          # Test build for Darwin AMD64
          env GOARCH=amd64 GOOS=darwin CGO_ENABLED=1 go build -o dist/wren-launcher-darwin-test main.go
          # Verify builds exist
          ls -la dist/
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wren-launcher-builds
          path: wren-launcher/dist/
          retention-days: 7

  security-scan:
    # run this job only if the PR is labeled with "ci/launcher" or if it's a push to main
    if: ${{ contains(github.event.pull_request.labels.*.name, 'ci/launcher') || github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache-dependency-path: wren-launcher/go.sum
      - name: Run Gosec Security Scanner
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec ./...
      - name: Run Go mod audit
        run: |
          go mod verify
          go list -json -deps ./... | jq -r '.Module | select(.Version) | "\(.Path) \(.Version)"' | sort -u
