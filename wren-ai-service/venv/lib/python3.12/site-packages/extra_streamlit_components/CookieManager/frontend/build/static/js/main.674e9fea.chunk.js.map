{"version":3,"sources":["CookieManager.jsx","index.jsx"],"names":["last_output","cookies","Cookies","withStreamlitConnection","props","args","method","cookie","value","options","output","converted_options","expires","Date","_objectSpread","set","setCookie","get","getCookie","getAll","remove","path","samesite","deleteCookie","JSON","stringify","Streamlit","setComponentValue","setComponentReady","useEffect","setFrameHeight","_jsx","ReactDOM","render","React","StrictMode","children","CookieManager","document","getElementById"],"mappings":"0LASIA,EAAc,KACZC,EAAU,IAAIC,IA8DLC,eA5DO,SAACC,GACrB,IAuBQC,EAASD,EAATC,KAEFC,EAASD,EAAa,OACtBE,EAASF,EAAa,OACtBG,EAAQH,EAAY,MACpBI,EAAUJ,EAAc,QAE1BK,EAAS,KAEb,OAAQJ,GACN,IAAK,MACHI,EAlCc,SAACH,EAAQC,EAAOC,GAChC,IAAME,EAAoB,CACxBC,QAAS,IAAIC,KAAKJ,EAAQG,UAI5B,OAFAH,EAAOK,wBAAA,GAAQL,GAAYE,GAC3BV,EAAQc,IAAIR,EAAQC,EAAOC,IACpB,CACT,CA2BaO,CAAUT,EAAQC,EAAOC,GAClC,MACF,IAAK,MACHC,EA5Bc,SAACH,GAEjB,OADcN,EAAQgB,IAAIV,EAE5B,CAyBaW,CAAUX,GACnB,MACF,IAAK,SACHG,EApBKT,EAAQkB,SAqBb,MACF,IAAK,SACHT,EA7BiB,SAACH,GAEpB,OADAN,EAAQmB,OAAOb,EAAQ,CAAEc,KAAM,IAAKC,SAAU,YACvC,CACT,CA0BaC,CAAahB,GAa1B,OAPIG,GAAUc,KAAKC,UAAUzB,IAAgBwB,KAAKC,UAAUf,KAC1DV,EAAcU,EACdgB,IAAUC,kBAAkBjB,GAC5BgB,IAAUE,qBAGZC,qBAAU,kBAAMH,IAAUI,gBAAgB,IACnCC,cAAA,SACT,IClEAC,IAASC,OACPF,cAACG,IAAMC,WAAU,CAAAC,SACfL,cAACM,EAAa,MAEhBC,SAASC,eAAe,Q","file":"static/js/main.674e9fea.chunk.js","sourcesContent":["import {\n  Streamlit,\n  ComponentProps,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { useEffect } from \"react\"\n\nimport Cookies from \"universal-cookie\"\n\nlet last_output = null\nconst cookies = new Cookies()\n\nconst CookieManager = (props: ComponentProps) => {\n  const setCookie = (cookie, value, options) => {\n    const converted_options = {\n      expires: new Date(options.expires),\n    }\n    options = { ...options, ...converted_options }\n    cookies.set(cookie, value, options)\n    return true\n  }\n\n  const getCookie = (cookie) => {\n    const value = cookies.get(cookie)\n    return value\n  }\n\n  const deleteCookie = (cookie) => {\n    cookies.remove(cookie, { path: \"/\", samesite: \"strict\" })\n    return true\n  }\n\n  const getAllCookies = () => {\n    return cookies.getAll()\n  }\n\n  const { args } = props\n\n  const method = args[\"method\"]\n  const cookie = args[\"cookie\"]\n  const value = args[\"value\"]\n  const options = args[\"options\"]\n\n  let output = null\n\n  switch (method) {\n    case \"set\":\n      output = setCookie(cookie, value, options)\n      break\n    case \"get\":\n      output = getCookie(cookie)\n      break\n    case \"getAll\":\n      output = getAllCookies()\n      break\n    case \"delete\":\n      output = deleteCookie(cookie)\n      break\n    default:\n      break\n  }\n\n  if (output && JSON.stringify(last_output) != JSON.stringify(output)) {\n    last_output = output\n    Streamlit.setComponentValue(output)\n    Streamlit.setComponentReady()\n  }\n\n  useEffect(() => Streamlit.setFrameHeight())\n  return <div></div>\n}\n\nexport default withStreamlitConnection(CookieManager)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport CookieManager from \"./CookieManager\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <CookieManager />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}