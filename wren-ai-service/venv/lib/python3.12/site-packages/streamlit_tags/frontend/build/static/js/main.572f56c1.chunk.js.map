{"version":3,"sources":["react-tag-input-componet/classnames.tsx","react-tag-input-componet/tag.tsx","react-tag-input-componet/index.tsx","keywords.tsx","index.tsx"],"names":["cc","obj","join","tagStyles","css","alignItems","background","borderRadius","display","justifyContent","paddingLeft","button","border","cursor","lineHeight","padding","color","Tag","text","remove","className","type","onClick","e","stopPropagation","aria-label","setup","React","createElement","RTIContainer","boxSizing","transition","bg","flexWrap","gap","borderColor","boxShadow","RTIInput","outline","fontSize","width","defaultSeprators","TagsInput","name","placeHolder","value","onChange","onBlur","seprators","onExisting","onRemoved","suggestions","useState","tags","setTags","useEffect","onTagRemove","filter","tag","aria-labelledby","map","key","options","allowTabFill","placeholder","onKeyDown","target","length","slice","includes","preventDefault","withStreamlitConnection","props","args","label","initialValue","setValue","Streamlit","setFrameHeight","values","setComponentValue","engine","Styletron","ReactDOM","render","StrictMode","theme","LightTheme","document","getElementById"],"mappings":"kPAOe,SAASA,IAAyC,IAAD,uBAAlCC,EAAkC,yBAAlCA,EAAkC,gBAC9D,OAAOA,EAAIC,KAAK,KCClB,IAAMC,EAAYC,YAAI,CACpBC,WAAY,SACZC,WAAY,iBACZC,aAAc,oBACdC,QAAS,cACTC,eAAgB,SAChBC,YAAa,eAEbC,OAAQ,CACNL,WAAY,OACZM,OAAQ,EACRL,aAAc,MACdM,OAAQ,UACRC,WAAY,UACZC,QAAS,iBAET,UAAW,CACTC,MAAO,4BAKE,SAASC,EAAT,GAA0C,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,OAMlC,OACE,0BAAMC,UAAWpB,EAAG,WAAYG,IAC9B,8BAAOe,GACP,4BACEG,KAAK,SACLC,QAViB,SAACC,GACtBA,EAAEC,kBACFL,EAAOD,IASHO,aAAA,iBAAsBP,IAHxB,W,YCfNQ,YAAMC,IAAMC,eAEZ,IAAMC,EAAezB,YAAI,CACvB,UAAW,OACX,cAAe,OACf,YAAa,UACb,cAAe,WACf,SAAU,SACV,WAAY,UACZ,iBAAkB,UAElB,IAAK,CACH0B,UAAW,aACXC,WAAY,iBAGd1B,WAAY,SACZ2B,GAAI,gBACJpB,OAAQ,8BACRL,aAAc,oBACdC,QAAS,OACTyB,SAAU,OACVC,IAAK,eACLpB,WAAY,IACZC,QAAS,eAET,iBAAkB,CAChBoB,YAAa,kBACbC,UAAW,qCAITC,EAAWjC,YAAI,CACnBQ,OAAQ,EACR0B,QAAS,EACTC,SAAU,UACVzB,WAAY,UACZ0B,MAAO,SAGHC,EAAmB,CAAC,SAEbC,EAAY,SAAC,GAUH,IATrBC,EASoB,EATpBA,KACAC,EAQoB,EARpBA,YACAC,EAOoB,EAPpBA,MACAC,EAMoB,EANpBA,SACAC,EAKoB,EALpBA,OACAC,EAIoB,EAJpBA,UACAC,EAGoB,EAHpBA,WACAC,EAEoB,EAFpBA,UACAC,EACoB,EADpBA,YACoB,EACIC,mBAASP,GAAS,IADtB,mBACbQ,EADa,KACPC,EADO,KAGpBC,qBAAU,WACRT,GAAYA,EAASO,KACpB,CAACA,IAEJ,IAoBMG,EAAc,SAACtC,GACnBoC,EAAQD,EAAKI,QAAO,SAAAC,GAAG,OAAIA,IAAQxC,MACnCgC,GAAaA,EAAUhC,IAGzB,OACE,yBAAKyC,kBAAiBhB,EAAMvB,UAAWpB,EAAG,iBAAkB6B,IACzDwB,EAAKO,KAAI,SAAAF,GAAG,OACX,kBAACzC,EAAD,CAAK4C,IAAKH,EAAKxC,KAAMwC,EAAKvC,OAAQqC,OAGpC,kBAAC,OAAD,CAAMM,QAASX,EAAaY,cAAc,GACtC,2BACF3C,UAAWpB,EAAG,aAAcqC,GAC5BhB,KAAK,OACLsB,KAAMA,EACNqB,YAAapB,EACbqB,UArCgB,SAAC1C,GACrBA,EAAEC,kBAEF,IAAMN,EAAOK,EAAE2C,OAAOrB,MAMtB,GAJc,cAAVtB,EAAEsC,KAAuBR,EAAKc,SAAWjD,GAC3CoC,EAAQD,EAAKe,MAAM,GAAI,IAGrBlD,IAAS8B,GAAaP,GAAkB4B,SAAS9C,EAAEsC,KAAM,CAC3D,GAAIR,EAAKgB,SAASnD,GAEhB,YADA+B,GAAcA,EAAW/B,IAG3BoC,EAAQ,GAAD,mBAAKD,GAAL,CAAWnC,KAClBK,EAAE2C,OAAOrB,MAAQ,GACjBtB,EAAE+C,mBAsBAvB,OAAQA,OCtFDwB,G,MAAAA,aAxBS,SAACC,GAA0B,MAGWA,EAAMC,KAA5DC,EAH2C,EAG3CA,MAAOxD,EAHoC,EAGpCA,KAAMyD,EAH8B,EAG9BA,aAAcxB,EAHgB,EAGhBA,YAHgB,EAIvBC,mBAASuB,GAJc,mBAI1C9B,EAJ0C,KAInC+B,EAJmC,KAWjD,OADArB,qBAAU,kBAAMsB,IAAUC,oBAExB,6BACI,kBAAC,EAAD,CACAjC,MAAOA,EACPC,SAAW,SAACD,GAAD,OARf+B,EADgBG,EASoBlC,QAPpCgC,IAAUG,kBAAmBD,GAFd,IAACA,GAUZpC,KAAM+B,EACN9B,YAAa1B,EACbiC,YAAaA,S,gCCnBf8B,EAAS,IAAIC,IAGnBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAmBxC,MAAOoC,GACxB,kBAAC,IAAD,CAAeK,MAAOC,KACpB,kBAAC,EAAD,SAINC,SAASC,eAAe,W","file":"static/js/main.572f56c1.chunk.js","sourcesContent":["/**\r\n * A minimal utility to combine classes\r\n *\r\n * @export\r\n * @param {(string[] | string)} obj\r\n * @returns {string}\r\n */\r\nexport default function cc(...obj: (string | number)[]): string {\r\n  return obj.join(\" \");\r\n}","import React from \"react\";\r\nimport { css } from \"goober\";\r\nimport cc from \"./classnames\";\r\n\r\ninterface TagProps {\r\n  text: string;\r\n  remove: any;\r\n}\r\n\r\nconst tagStyles = css({\r\n  alignItems: \"center\",\r\n  background: \"var(--rti-tag)\",\r\n  borderRadius: \"var(--rti-radius)\",\r\n  display: \"inline-flex\",\r\n  justifyContent: \"center\",\r\n  paddingLeft: \"var(--rti-s)\",\r\n\r\n  button: {\r\n    background: \"none\",\r\n    border: 0,\r\n    borderRadius: \"50%\",\r\n    cursor: \"pointer\",\r\n    lineHeight: \"inherit\",\r\n    padding: \"0 var(--rti-s)\",\r\n\r\n    \"&:hover\": {\r\n      color: \"var(--rti-tag-remove)\",\r\n    },\r\n  },\r\n});\r\n\r\nexport default function Tag({ text, remove }: TagProps) {\r\n  const handleOnRemove = (e: { stopPropagation: () => void; }) => {\r\n    e.stopPropagation();\r\n    remove(text);\r\n  };\r\n\r\n  return (\r\n    <span className={cc(\"rti--tag\", tagStyles)}>\r\n      <span>{text}</span>\r\n      <button\r\n        type=\"button\"\r\n        onClick={handleOnRemove}\r\n        aria-label={`remove ${text}`}\r\n      >\r\n        &#10005;\r\n      </button>\r\n    </span>\r\n  );\r\n}","import { css, setup } from \"goober\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport cc from \"./classnames\";\r\nimport Tag from \"./tag\";\r\nimport {Hint} from \"react-autocomplete-hint\";\r\n\r\nexport interface IHintOption {\r\n    id: string | number;\r\n    label: string;\r\n}\r\n\r\nexport interface TagsInputProps {\r\n  name?: string;\r\n  placeHolder?: string;\r\n  value?: string[];\r\n  onChange?: (tags: string[]) => void;\r\n  suggestions: Array<string> | Array<IHintOption>;\r\n  onBlur?: any;\r\n  seprators?: string[];\r\n  onExisting?: (tag: string) => void;\r\n  onRemoved?: (tag: string) => void;\r\n}\r\n\r\n// initialize goober once\r\nsetup(React.createElement);\r\n\r\nconst RTIContainer = css({\r\n  \"--rtiBg\": \"#fff\",\r\n  \"--rtiBorder\": \"#ccc\",\r\n  \"--rtiMain\": \"#3182ce\",\r\n  \"--rtiRadius\": \"0.375rem\",\r\n  \"--rtiS\": \"0.5rem\",\r\n  \"--rtiTag\": \"#edf2f7\",\r\n  \"--rtiTagRemove\": \"#e53e3e\",\r\n\r\n  \"*\": {\r\n    boxSizing: \"border-box\",\r\n    transition: \"all 0.2s ease\",\r\n  },\r\n\r\n  alignItems: \"center\",\r\n  bg: \"var(--rti-bg)\",\r\n  border: \"1px solid var(--rti-border)\",\r\n  borderRadius: \"var(--rti-radius)\",\r\n  display: \"flex\",\r\n  flexWrap: \"wrap\",\r\n  gap: \"var(--rti-s)\",\r\n  lineHeight: 1.4,\r\n  padding: \"var(--rti-s)\",\r\n\r\n  \"&:focus-within\": {\r\n    borderColor: \"var(--rti-main)\",\r\n    boxShadow: \"var(--rti-main) 0px 0px 0px 1px\",\r\n  },\r\n});\r\n\r\nconst RTIInput = css({\r\n  border: 0,\r\n  outline: 0,\r\n  fontSize: \"inherit\",\r\n  lineHeight: \"inherit\",\r\n  width: \"100%\",\r\n});\r\n\r\nconst defaultSeprators = [\"Enter\"];\r\n\r\nexport const TagsInput = ({\r\n  name,\r\n  placeHolder,\r\n  value,\r\n  onChange,\r\n  onBlur,\r\n  seprators,\r\n  onExisting,\r\n  onRemoved,\r\n  suggestions\r\n}: TagsInputProps) => {\r\n  const [tags, setTags] = useState(value || []);\r\n\r\n  useEffect(() => {\r\n    onChange && onChange(tags);\r\n  }, [tags]);\r\n\r\n  const handleOnKeyUp = (e) => {\r\n    e.stopPropagation();\r\n\r\n    const text = e.target.value;\r\n\r\n    if (e.key === \"Backspace\" && tags.length && !text) {\r\n      setTags(tags.slice(0, -1));\r\n    }\r\n\r\n    if (text && (seprators || defaultSeprators).includes(e.key)) {\r\n      if (tags.includes(text)) {\r\n        onExisting && onExisting(text);\r\n        return;\r\n      }\r\n      setTags([...tags, text]);\r\n      e.target.value = \"\";\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n  const onTagRemove = (text: string) => {\r\n    setTags(tags.filter(tag => tag !== text));\r\n    onRemoved && onRemoved(text);\r\n  };\r\n\r\n  return (\r\n    <div aria-labelledby={name} className={cc(\"rti--container\", RTIContainer)}>\r\n      {tags.map(tag => (\r\n        <Tag key={tag} text={tag} remove={onTagRemove} />\r\n      ))}\r\n\r\n      <Hint options={suggestions} allowTabFill={true}>\r\n          <input\r\n        className={cc(\"rti--input\", RTIInput)}\r\n        type=\"text\"\r\n        name={name}\r\n        placeholder={placeHolder}\r\n        onKeyDown={handleOnKeyUp}\r\n        onBlur={onBlur}\r\n      />\r\n    </Hint>\r\n    </div>\r\n  );\r\n};","import React,{ useEffect, useState }  from \"react\"\r\nimport { ComponentProps, Streamlit, withStreamlitConnection } from \"streamlit-component-lib\"\r\nimport { TagsInput } from \"./react-tag-input-componet\";\r\nimport \"./styles.css\";\r\n\r\ninterface PythonArgs {\r\n  label: string\r\n  text: string\r\n  initialValue: string[]\r\n  suggestions: string[]\r\n}\r\n\r\nconst Custom_keywords = (props: ComponentProps) => {\r\n  // Destructure using Typescript interface\r\n  // This ensures typing validation for received props from Python\r\n  let { label, text, initialValue, suggestions}: PythonArgs = props.args\r\n  const [value, setValue] = useState(initialValue)\r\n\r\n  const onSubmit = (values: string[]) => {\r\n    setValue(values)\r\n    Streamlit.setComponentValue((values))\r\n  }\r\n  useEffect(() => Streamlit.setFrameHeight())\r\n  return (\r\n    <div>\r\n        <TagsInput\r\n        value={value}\r\n        onChange= {(value) =>  onSubmit(value)}\r\n        name={label}\r\n        placeHolder={text}\r\n        suggestions={suggestions}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withStreamlitConnection(Custom_keywords)","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport Custom_keywords from \"./keywords\"\r\nimport Auto_keywords from \"./autocomplete\"\r\n\r\n// Lots of import to define a Styletron engine and load the light theme of baseui\r\n// @ts-ignore\r\nimport { Client as Styletron } from \"styletron-engine-atomic\"\r\nimport { Provider as StyletronProvider } from \"styletron-react\"\r\nimport { ThemeProvider, LightTheme } from \"baseui\"\r\n\r\nconst engine = new Styletron()\r\n\r\n// Wrap your CustomSlider with the baseui them\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StyletronProvider value={engine}>\r\n      <ThemeProvider theme={LightTheme}>\r\n        <Custom_keywords />\r\n      </ThemeProvider>\r\n    </StyletronProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}