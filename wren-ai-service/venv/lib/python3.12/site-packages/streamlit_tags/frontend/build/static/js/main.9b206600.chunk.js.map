{"version":3,"sources":["react-tag-input-componet/classnames.tsx","react-tag-input-componet/tag.tsx","react-autocomplete-hint/utils.ts","react-autocomplete-hint/index.tsx","react-tag-input-componet/index.tsx","keywords.tsx","index.tsx"],"names":["cc","obj","join","tagStyles","css","alignItems","background","borderRadius","display","justifyContent","paddingLeft","button","border","cursor","lineHeight","padding","color","Tag","text","remove","className","type","onClick","e","stopPropagation","aria-label","mergeRefs","refs","filteredRefs","filter","Boolean","inst","ref","current","interpolateStyle","styles","attr","subattr","replace","toUpperCase","map","dir","Hint","props","child","React","Children","only","children","toString","toLowerCase","TypeError","options","disableHint","allowTabFill","onFill","onHint","valueModifier","childProps","inputWrapperRef","useRef","mainInputRef","hintWrapperRef","hintRef","useState","unModifiedText","setUnmodifiedText","setText","hint","setHint","match","setMatch","changeEvent","setChangeEvent","useEffect","duplicate","array","tracker","i","length","label","getFirstDuplicateOption","console","warn","inputStyle","window","getComputedStyle","styleHint","setHintTextAndId","x","startsWith","sort","a","b","sortAsc","getMatch","slice","handleOnFill","target","value","onChange","style","width","fontFamily","fontSize","height","boxSizing","margin","borderStyle","borderWidth","childRef","cloneElement","mainInput","persist","modifiedValue","onBlur","relatedTarget","onFocus","onKeyDown","caretIsAtTextEnd","currentTarget","selectionEnd","key","preventDefault","position","pointerEvents","backgroundColor","borderColor","boxShadow","top","left","visibility","whiteSpace","hintCaretPosition","setTimeout","focus","caretPosition","setSelectionRange","outline","caretColor","defaultValue","tabIndex","setup","createElement","RTIContainer","transition","bg","flexWrap","gap","RTIInput","defaultSeprators","TagsInput","name","placeHolder","seprators","onExisting","onRemoved","suggestions","tags","setTags","onTagRemove","tag","aria-labelledby","placeholder","includes","withStreamlitConnection","args","initialValue","setValue","Streamlit","setFrameHeight","values","setComponentValue","engine","Styletron","ReactDOM","render","StrictMode","theme","LightTheme","document","getElementById"],"mappings":"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","file":"static/js/main.9b206600.chunk.js","sourcesContent":["/**\r\n * A minimal utility to combine classes\r\n *\r\n * @export\r\n * @param {(string[] | string)} obj\r\n * @returns {string}\r\n */\r\nexport default function cc(...obj: (string | number)[]): string {\r\n  return obj.join(\" \");\r\n}","import React from \"react\";\r\nimport { css } from \"goober\";\r\nimport cc from \"./classnames\";\r\n\r\ninterface TagProps {\r\n  text: string;\r\n  remove: any;\r\n}\r\n\r\nconst tagStyles = css({\r\n  alignItems: \"center\",\r\n  background: \"var(--rti-tag)\",\r\n  borderRadius: \"var(--rti-radius)\",\r\n  display: \"inline-flex\",\r\n  justifyContent: \"center\",\r\n  paddingLeft: \"var(--rti-s)\",\r\n\r\n  button: {\r\n    background: \"none\",\r\n    border: 0,\r\n    borderRadius: \"50%\",\r\n    cursor: \"pointer\",\r\n    lineHeight: \"inherit\",\r\n    padding: \"0 var(--rti-s)\",\r\n\r\n    \"&:hover\": {\r\n      color: \"var(--rti-tag-remove)\",\r\n    },\r\n  },\r\n});\r\n\r\nexport default function Tag({ text, remove }: TagProps) {\r\n  const handleOnRemove = (e: { stopPropagation: () => void; }) => {\r\n    e.stopPropagation();\r\n    remove(text);\r\n  };\r\n\r\n  return (\r\n    <span className={cc(\"rti--tag\", tagStyles)}>\r\n      <span>{text}</span>\r\n      <button\r\n        type=\"button\"\r\n        onClick={handleOnRemove}\r\n        aria-label={`remove ${text}`}\r\n      >\r\n        &#10005;\r\n      </button>\r\n    </span>\r\n  );\r\n}","import { MutableRefObject, RefCallback } from \"react\";\r\nimport { IHintOption } from \"./IHintOption\";\r\n\r\ntype MutableRef<T> = RefCallback<T> | MutableRefObject<T> | null;\r\n\r\nexport function mergeRefs(...refs: Array<MutableRef<HTMLElement | null>>) {\r\n    const filteredRefs = refs.filter(Boolean);\r\n\r\n    return (inst: HTMLElement) => {\r\n        for (let ref of filteredRefs) {\r\n            if (typeof ref === 'function') {\r\n                ref(inst);\r\n            } else if (ref) {\r\n                ref.current = inst;\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\n// IE doesn't seem to get the composite computed value (eg: 'padding',\r\n// 'borderStyle', etc.), so generate these from the individual values.\r\nexport function interpolateStyle(\r\n    styles: CSSStyleDeclaration,\r\n    attr: string,\r\n    subattr: string = ''\r\n): string {\r\n    // Title-case the sub-attribute.\r\n    if (subattr) {\r\n        subattr = subattr.replace(subattr[0], subattr[0].toUpperCase());\r\n    }\r\n\r\n    return ['Top', 'Right', 'Bottom', 'Left']\r\n        // @ts-ignore: (attr + dir + subattr) property cannot be determined at compile time\r\n        .map((dir) => styles[attr + dir + subattr])\r\n        .join(' ');\r\n}\r\n\r\nexport function sortAsc<T>(a: T, b: T) {\r\n    if (a > b) {\r\n        return 1;\r\n    }\r\n    if (a < b) {\r\n        return -1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport function getFirstDuplicateOption(array: Array<IHintOption>) {\r\n    let tracker: { [key: string]: boolean } = {};\r\n\r\n    for (let i = 0; i < array.length; i++) {\r\n        if (tracker[array[i].label]) {\r\n            return array[i].label;\r\n        }\r\n\r\n        tracker[array[i].label] = true;\r\n    }\r\n\r\n    return null;\r\n}","import React, {\r\n    useState,\r\n    cloneElement,\r\n    useEffect,\r\n    useRef,\r\n    ReactElement\r\n} from 'react';\r\nimport { IHintOption } from './IHintOption';\r\nimport {\r\n    mergeRefs,\r\n    interpolateStyle,\r\n    sortAsc,\r\n    getFirstDuplicateOption\r\n} from './utils';\r\n\r\nexport interface IHintProps {\r\n    options: Array<string> | Array<IHintOption>;\r\n    disableHint?: boolean;\r\n    children: ReactElement;\r\n    allowTabFill?: boolean;\r\n    onFill?(value: string | IHintOption): void;\r\n    onHint?(value: string | IHintOption | undefined): void;\r\n    valueModifier?(value: string): string;\r\n}\r\n\r\nexport const Hint: React.FC<IHintProps> = props => {\r\n    const child = React.Children.only(props.children);\r\n\r\n    if (child.type?.toString()?.toLowerCase() !== 'input') {\r\n        throw new TypeError(`react-autocomplete-hint: 'Hint' only accepts an 'input' element as child.`);\r\n    }\r\n\r\n    const {\r\n        options,\r\n        disableHint,\r\n        allowTabFill,\r\n        onFill,\r\n        onHint,\r\n        valueModifier\r\n    } = props;\r\n\r\n    const childProps = child.props;\r\n\r\n    let inputWrapperRef = useRef<HTMLDivElement>(null);\r\n    let mainInputRef = useRef<HTMLInputElement>(null);\r\n    let hintWrapperRef = useRef<HTMLSpanElement>(null);\r\n    let hintRef = useRef<HTMLInputElement>(null);\r\n    const [unModifiedText, setUnmodifiedText] = useState('');\r\n    const [text, setText] = useState('');\r\n    const [hint, setHint] = useState('');\r\n    const [match, setMatch] = useState<string | IHintOption>();\r\n    const [changeEvent, setChangeEvent] = useState<React.ChangeEvent<HTMLInputElement>>();\r\n\r\n    useEffect(() => {\r\n        if (typeof options[0] === 'object') {\r\n            const duplicate = getFirstDuplicateOption(options as Array<IHintOption>);\r\n            if (duplicate) {\r\n                console.warn(`react-autocomplete-hint: \"${duplicate}\" occurs more than once and may cause errors. Options should not contain duplicate values!`);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (disableHint) {\r\n            return;\r\n        }\r\n\r\n        const inputStyle = mainInputRef.current && window.getComputedStyle(mainInputRef.current);\r\n        inputStyle && styleHint(inputWrapperRef, hintWrapperRef, hintRef, inputStyle);\r\n    });\r\n\r\n    const getMatch = (text: string) => {\r\n        if (!text || text === '') {\r\n            return;\r\n        }\r\n\r\n        if (typeof (options[0]) === 'string') {\r\n            const match = (options as Array<string>)\r\n                .filter(x => x.toLowerCase() !== text.toLowerCase() && x.toLowerCase().startsWith(text.toLowerCase()))\r\n                .sort()[0];\r\n\r\n            return match;\r\n        } else {\r\n            const match = (options as Array<IHintOption>)\r\n                .filter(x => x.label.toLowerCase() !== text.toLowerCase() && x.label.toLowerCase().startsWith(text.toLowerCase()))\r\n                .sort((a, b) => sortAsc(a.label, b.label))[0];\r\n\r\n            return match;\r\n        }\r\n    };\r\n\r\n    const setHintTextAndId = (text: string) => {\r\n        setText(text);\r\n\r\n        const match = getMatch(text);\r\n        let hint: string;\r\n\r\n        if (!match) {\r\n            hint = '';\r\n        }\r\n        else if (typeof match === 'string') {\r\n            hint = match.slice(text.length);\r\n        } else {\r\n            hint = match.label.slice(text.length);\r\n        }\r\n\r\n        setHint(hint);\r\n        setMatch(match);\r\n        onHint && onHint(match)\r\n    }\r\n\r\n    const handleOnFill = () => {\r\n        if (hint !== '' && changeEvent) {\r\n            changeEvent.target.value = unModifiedText + hint;\r\n            childProps.onChange && childProps.onChange(changeEvent);\r\n            setHintTextAndId('');\r\n\r\n            onFill && onFill(match!);\r\n        }\r\n    };\r\n\r\n    const styleHint = (\r\n        inputWrapperRef: React.RefObject<HTMLDivElement>,\r\n        hintWrapperRef: React.RefObject<HTMLSpanElement>,\r\n        hintRef: React.RefObject<HTMLInputElement>,\r\n        inputStyle: CSSStyleDeclaration) => {\r\n        if (inputWrapperRef?.current?.style) {\r\n            inputWrapperRef.current.style.width = inputStyle.width;\r\n        }\r\n\r\n        if (hintWrapperRef?.current?.style) {\r\n            hintWrapperRef.current.style.fontFamily = inputStyle.fontFamily;\r\n            hintWrapperRef.current.style.fontSize = inputStyle.fontSize;\r\n            hintWrapperRef.current.style.width = inputStyle.width;\r\n            hintWrapperRef.current.style.height = inputStyle.height;\r\n            hintWrapperRef.current.style.lineHeight = inputStyle.lineHeight;\r\n            hintWrapperRef.current.style.boxSizing = inputStyle.boxSizing;\r\n            hintWrapperRef.current.style.margin = interpolateStyle(inputStyle, 'margin');\r\n            hintWrapperRef.current.style.padding = interpolateStyle(inputStyle, 'padding');\r\n            hintWrapperRef.current.style.borderStyle = interpolateStyle(inputStyle, 'border', 'style');\r\n            hintWrapperRef.current.style.borderWidth = interpolateStyle(inputStyle, 'border', 'width');\r\n        }\r\n\r\n        if (hintRef?.current?.style) {\r\n            hintRef.current.style.fontFamily = inputStyle.fontFamily;\r\n            hintRef.current.style.fontSize = inputStyle.fontSize;\r\n            hintRef.current.style.lineHeight = inputStyle.lineHeight;\r\n        }\r\n    };\r\n\r\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setChangeEvent(e);\r\n        e.persist();\r\n\r\n        setUnmodifiedText(e.target.value);\r\n        const modifiedValue = valueModifier ? valueModifier(e.target.value) : e.target.value;\r\n        setHintTextAndId(modifiedValue);\r\n\r\n        childProps.onChange && childProps.onChange(e);\r\n    };\r\n\r\n    const onFocus = (e: React.FocusEvent<HTMLInputElement>) => {\r\n        setHintTextAndId(e.target.value);\r\n        childProps.onFocus && childProps.onFocus(e);\r\n    };\r\n\r\n    const onBlur = (e: React.FocusEvent<HTMLInputElement>) => {\r\n        //Only blur it if the new focus isn't the the hint input\r\n        if (hintRef?.current !== e.relatedTarget) {\r\n            setHintTextAndId('');\r\n            childProps.onBlur && childProps.onBlur(e);\r\n        }\r\n    };\r\n\r\n    const ARROWRIGHT = 'ArrowRight';\r\n    const TAB = 'Tab';\r\n    const onKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        const caretIsAtTextEnd = (() => {\r\n            // For selectable input types (\"text\", \"search\"), only select the hint if\r\n            // it's at the end of the input value. For non-selectable types (\"email\",\r\n            // \"number\"), always select the hint.\r\n\r\n            const isNonSelectableType = e.currentTarget.selectionEnd === null;\r\n            const caretIsAtTextEnd = isNonSelectableType || e.currentTarget.selectionEnd === e.currentTarget.value.length;\r\n\r\n            return caretIsAtTextEnd;\r\n        })();\r\n\r\n        if (caretIsAtTextEnd && e.key === ARROWRIGHT) {\r\n            handleOnFill();\r\n        } else if (caretIsAtTextEnd && allowTabFill && e.key === TAB && hint !== '') {\r\n            e.preventDefault();\r\n            handleOnFill();\r\n        }\r\n\r\n        childProps.onKeyDown && childProps.onKeyDown(e);\r\n    };\r\n\r\n    const onHintClick = (e: React.MouseEvent<HTMLInputElement>) => {\r\n        const hintCaretPosition = e.currentTarget.selectionEnd || 0;\r\n\r\n        // If user clicks the position before the first character of the hint,\r\n        // move focus to the end of the mainInput text\r\n        if (hintCaretPosition === 0) {\r\n            mainInputRef.current?.focus();\r\n            return;\r\n        }\r\n\r\n        if (!!hint && hint !== '') {\r\n            handleOnFill();\r\n            setTimeout(() => {\r\n                mainInputRef.current?.focus();\r\n                const caretPosition = text.length + hintCaretPosition;\r\n                mainInputRef.current?.setSelectionRange(caretPosition, caretPosition);\r\n            }, 0);\r\n        }\r\n    };\r\n\r\n    const childRef = cloneElement(child as any).ref;\r\n    const mainInput = cloneElement(\r\n        child,\r\n        {\r\n            ...childProps,\r\n            style: {\r\n                ...childProps.style,\r\n                boxSizing: 'border-box'\r\n            },\r\n            onChange,\r\n            onBlur,\r\n            onFocus,\r\n            onKeyDown,\r\n            ref: childRef && typeof (childRef) !== 'string'\r\n                ? mergeRefs(childRef, mainInputRef)\r\n                : mainInputRef\r\n        }\r\n    );\r\n\r\n    return (\r\n        <div\r\n            className=\"rah-input-wrapper\"\r\n            style={{\r\n                position: 'relative'\r\n            }}>\r\n            {\r\n                disableHint\r\n                    ? child\r\n                    : (\r\n                        <>\r\n                            {mainInput}\r\n                            <span\r\n                                className=\"rah-hint-wrapper\"\r\n                                ref={hintWrapperRef}\r\n                                style={{\r\n                                    display: 'flex',\r\n                                    pointerEvents: 'none',\r\n                                    backgroundColor: 'transparent',\r\n                                    borderColor: 'transparent',\r\n                                    boxSizing: 'border-box',\r\n                                    boxShadow: 'none',\r\n                                    color: 'rgba(0, 0, 0, 0.35)',\r\n                                    position: 'absolute',\r\n                                    top: 0,\r\n                                    left: 0,\r\n                                }}\r\n                            >\r\n                                <span\r\n                                    className='rah-text-filler'\r\n                                    style={{\r\n                                        visibility: 'hidden',\r\n                                        pointerEvents: 'none',\r\n                                        whiteSpace: 'pre'\r\n                                    }}\r\n                                >\r\n                                    {text}\r\n                                </span>\r\n                                <input\r\n                                    className=\"rah-hint\"\r\n                                    ref={hintRef}\r\n                                    onClick={onHintClick}\r\n                                    style={{\r\n                                        pointerEvents: !hint || hint === '' ? 'none' : 'visible',\r\n                                        background: 'transparent',\r\n                                        width: '100%',\r\n                                        outline: 'none',\r\n                                        border: 'none',\r\n                                        boxShadow: 'none',\r\n                                        padding: 0,\r\n                                        margin: 0,\r\n                                        color: 'rgba(0, 0, 0, 0.50)',\r\n                                        caretColor: 'transparent'\r\n                                    }}\r\n                                    defaultValue={hint}\r\n                                    tabIndex={-1}\r\n                                />\r\n                            </span>\r\n                        </>\r\n                    )\r\n            }\r\n        </div>\r\n    );\r\n}","import { css, setup } from \"goober\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport cc from \"./classnames\";\r\nimport Tag from \"./tag\";\r\nimport {Hint} from \"../react-autocomplete-hint\";\r\nimport {Input} from 'baseui/input';\r\n\r\n\r\n\r\nexport interface IHintOption {\r\n    id: string | number;\r\n    label: string;\r\n}\r\n\r\nexport interface TagsInputProps {\r\n  name?: string;\r\n  placeHolder?: string;\r\n  value?: string[];\r\n  onChange?: (tags: string[]) => void;\r\n  suggestions: Array<string> | Array<IHintOption>;\r\n  onBlur?: any;\r\n  seprators?: string[];\r\n  onExisting?: (tag: string) => void;\r\n  onRemoved?: (tag: string) => void;\r\n}\r\n\r\n// initialize goober once\r\nsetup(React.createElement);\r\n\r\nconst RTIContainer = css({\r\n  \"--rtiBg\": \"#fff\",\r\n  \"--rtiBorder\": \"#ccc\",\r\n  \"--rtiMain\": \"#3182ce\",\r\n  \"--rtiRadius\": \"0.375rem\",\r\n  \"--rtiS\": \"0.5rem\",\r\n  \"--rtiTag\": \"#edf2f7\",\r\n  \"--rtiTagRemove\": \"#e53e3e\",\r\n\r\n  \"*\": {\r\n    boxSizing: \"border-box\",\r\n    transition: \"all 0.2s ease\",\r\n  },\r\n\r\n  alignItems: \"center\",\r\n  bg: \"var(--rti-bg)\",\r\n  border: \"1px solid var(--rti-border)\",\r\n  borderRadius: \"var(--rti-radius)\",\r\n  display: \"flex\",\r\n  flexWrap: \"wrap\",\r\n  gap: \"var(--rti-s)\",\r\n  lineHeight: 1.4,\r\n  padding: \"var(--rti-s)\",\r\n\r\n  \"&:focus-within\": {\r\n    borderColor: \"var(--rti-main)\",\r\n    boxShadow: \"var(--rti-main) 0px 0px 0px 1px\",\r\n  },\r\n});\r\n\r\nconst RTIInput = css({\r\n  border: 0,\r\n  outline: 0,\r\n  fontSize: \"inherit\",\r\n  lineHeight: \"inherit\",\r\n  width: \"100%\",\r\n});\r\n\r\nconst defaultSeprators = [\"Enter\"];\r\n\r\nexport const TagsInput = ({\r\n  name,\r\n  placeHolder,\r\n  value,\r\n  onChange,\r\n  onBlur,\r\n  seprators,\r\n  onExisting,\r\n  onRemoved,\r\n  suggestions\r\n}: TagsInputProps) => {\r\n  const [tags, setTags] = useState(value || []);\r\n\r\n  useEffect(() => {\r\n    onChange && onChange(tags);\r\n  }, [tags]);\r\n\r\n  const handleOnKeyUp = (e) => {\r\n    e.stopPropagation();\r\n\r\n    const text = e.target.value;\r\n\r\n    if (e.key === \"Backspace\" && tags.length && !text) {\r\n      setTags(tags.slice(0, -1));\r\n    }\r\n\r\n    if (text && (seprators || defaultSeprators).includes(e.key)) {\r\n      if (tags.includes(text)) {\r\n        onExisting && onExisting(text);\r\n        return;\r\n      }\r\n      setTags([...tags, text]);\r\n      e.target.value = \"\";\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n  const onTagRemove = (text: string) => {\r\n    setTags(tags.filter(tag => tag !== text));\r\n    onRemoved && onRemoved(text);\r\n  };\r\n\r\n  return (\r\n    <div aria-labelledby={name} className={cc(\"rti--container\", RTIContainer)}>\r\n      {tags.map(tag => (\r\n        <Tag key={tag} text={tag} remove={onTagRemove} />\r\n      ))}\r\n\r\n      <Hint options={suggestions} allowTabFill={true}>\r\n          <input\r\n              className={cc(\"rti--input\", RTIInput)}\r\n              type=\"text\"\r\n              name={name}\r\n              placeholder={placeHolder}\r\n              onKeyDown={handleOnKeyUp}\r\n              onBlur={onBlur}\r\n      />\r\n    </Hint>\r\n    </div>\r\n  );\r\n};","import React,{ useEffect, useState }  from \"react\"\r\nimport { ComponentProps, Streamlit, withStreamlitConnection } from \"streamlit-component-lib\"\r\nimport { TagsInput } from \"./react-tag-input-componet\";\r\nimport \"./styles.css\";\r\n\r\ninterface PythonArgs {\r\n  label: string\r\n  text: string\r\n  initialValue: string[]\r\n  suggestions: string[]\r\n}\r\n\r\nconst Custom_keywords = (props: ComponentProps) => {\r\n  // Destructure using Typescript interface\r\n  // This ensures typing validation for received props from Python\r\n  let { label, text, initialValue, suggestions}: PythonArgs = props.args\r\n  const [value, setValue] = useState(initialValue)\r\n\r\n  const onSubmit = (values: string[]) => {\r\n    setValue(values)\r\n    Streamlit.setComponentValue((values))\r\n  }\r\n  useEffect(() => Streamlit.setFrameHeight())\r\n  return (\r\n    <div>\r\n        <TagsInput\r\n        value={value}\r\n        onChange= {(value) =>  onSubmit(value)}\r\n        name={label}\r\n        placeHolder={text}\r\n        suggestions={suggestions}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withStreamlitConnection(Custom_keywords)","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport Custom_keywords from \"./keywords\"\r\n\r\n// Lots of import to define a Styletron engine and load the light theme of baseui\r\n// @ts-ignore\r\nimport { Client as Styletron } from \"styletron-engine-atomic\"\r\nimport { Provider as StyletronProvider } from \"styletron-react\"\r\nimport { ThemeProvider, LightTheme } from \"baseui\"\r\n\r\nconst engine = new Styletron()\r\n\r\n// Wrap your CustomSlider with the baseui them\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StyletronProvider value={engine}>\r\n      <ThemeProvider theme={LightTheme}>\r\n        <Custom_keywords />\r\n      </ThemeProvider>\r\n    </StyletronProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)"],"sourceRoot":""}