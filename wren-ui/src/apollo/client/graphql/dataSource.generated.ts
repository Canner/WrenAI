import * as Types from './__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type UsableDataSourcesQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type UsableDataSourcesQuery = { __typename?: 'Query', usableDataSource: Array<{ __typename?: 'UsableDataSource', type: Types.DataSourceName, requiredProperties: Array<string> }> };

export type ListDataSourceTablesQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type ListDataSourceTablesQuery = { __typename?: 'Query', listDataSourceTables: Array<{ __typename?: 'CompactTable', name: string }> };

export type AutoGeneratedRelationsQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type AutoGeneratedRelationsQuery = { __typename?: 'Query', autoGenerateRelation?: Array<{ __typename?: 'RecommandRelations', id: number, name: string, relations: Array<{ __typename?: 'Relation', fromModelId: number, fromModelReferenceName: string, fromColumnId: number, fromColumnReferenceName: string, toModelId: number, toModelReferenceName: string, toColumnId: number, toColumnReferenceName: string, type: Types.RelationType, name: string } | null> }> | null };

export type SaveDataSourceMutationVariables = Types.Exact<{
  data: Types.DataSourceInput;
}>;


export type SaveDataSourceMutation = { __typename?: 'Mutation', saveDataSource: { __typename?: 'DataSource', type: Types.DataSourceName, properties: any } };

export type SaveTablesMutationVariables = Types.Exact<{
  data: Types.SaveTablesInput;
}>;


export type SaveTablesMutation = { __typename?: 'Mutation', saveTables: any };

export type SaveRelationsMutationVariables = Types.Exact<{
  data: Types.SaveRelationInput;
}>;


export type SaveRelationsMutation = { __typename?: 'Mutation', saveRelations: any };


export const UsableDataSourcesDocument = gql`
    query UsableDataSources {
  usableDataSource {
    type
    requiredProperties
  }
}
    `;

/**
 * __useUsableDataSourcesQuery__
 *
 * To run a query within a React component, call `useUsableDataSourcesQuery` and pass it any options that fit your needs.
 * When your component renders, `useUsableDataSourcesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUsableDataSourcesQuery({
 *   variables: {
 *   },
 * });
 */
export function useUsableDataSourcesQuery(baseOptions?: Apollo.QueryHookOptions<UsableDataSourcesQuery, UsableDataSourcesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<UsableDataSourcesQuery, UsableDataSourcesQueryVariables>(UsableDataSourcesDocument, options);
      }
export function useUsableDataSourcesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UsableDataSourcesQuery, UsableDataSourcesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<UsableDataSourcesQuery, UsableDataSourcesQueryVariables>(UsableDataSourcesDocument, options);
        }
export type UsableDataSourcesQueryHookResult = ReturnType<typeof useUsableDataSourcesQuery>;
export type UsableDataSourcesLazyQueryHookResult = ReturnType<typeof useUsableDataSourcesLazyQuery>;
export type UsableDataSourcesQueryResult = Apollo.QueryResult<UsableDataSourcesQuery, UsableDataSourcesQueryVariables>;
export const ListDataSourceTablesDocument = gql`
    query ListDataSourceTables {
  listDataSourceTables {
    name
  }
}
    `;

/**
 * __useListDataSourceTablesQuery__
 *
 * To run a query within a React component, call `useListDataSourceTablesQuery` and pass it any options that fit your needs.
 * When your component renders, `useListDataSourceTablesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useListDataSourceTablesQuery({
 *   variables: {
 *   },
 * });
 */
export function useListDataSourceTablesQuery(baseOptions?: Apollo.QueryHookOptions<ListDataSourceTablesQuery, ListDataSourceTablesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<ListDataSourceTablesQuery, ListDataSourceTablesQueryVariables>(ListDataSourceTablesDocument, options);
      }
export function useListDataSourceTablesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ListDataSourceTablesQuery, ListDataSourceTablesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<ListDataSourceTablesQuery, ListDataSourceTablesQueryVariables>(ListDataSourceTablesDocument, options);
        }
export type ListDataSourceTablesQueryHookResult = ReturnType<typeof useListDataSourceTablesQuery>;
export type ListDataSourceTablesLazyQueryHookResult = ReturnType<typeof useListDataSourceTablesLazyQuery>;
export type ListDataSourceTablesQueryResult = Apollo.QueryResult<ListDataSourceTablesQuery, ListDataSourceTablesQueryVariables>;
export const AutoGeneratedRelationsDocument = gql`
    query AutoGeneratedRelations {
  autoGenerateRelation {
    id
    name
    relations {
      fromModelId
      fromModelReferenceName
      fromColumnId
      fromColumnReferenceName
      toModelId
      toModelReferenceName
      toColumnId
      toColumnReferenceName
      type
      name
    }
  }
}
    `;

/**
 * __useAutoGeneratedRelationsQuery__
 *
 * To run a query within a React component, call `useAutoGeneratedRelationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAutoGeneratedRelationsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAutoGeneratedRelationsQuery({
 *   variables: {
 *   },
 * });
 */
export function useAutoGeneratedRelationsQuery(baseOptions?: Apollo.QueryHookOptions<AutoGeneratedRelationsQuery, AutoGeneratedRelationsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AutoGeneratedRelationsQuery, AutoGeneratedRelationsQueryVariables>(AutoGeneratedRelationsDocument, options);
      }
export function useAutoGeneratedRelationsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AutoGeneratedRelationsQuery, AutoGeneratedRelationsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AutoGeneratedRelationsQuery, AutoGeneratedRelationsQueryVariables>(AutoGeneratedRelationsDocument, options);
        }
export type AutoGeneratedRelationsQueryHookResult = ReturnType<typeof useAutoGeneratedRelationsQuery>;
export type AutoGeneratedRelationsLazyQueryHookResult = ReturnType<typeof useAutoGeneratedRelationsLazyQuery>;
export type AutoGeneratedRelationsQueryResult = Apollo.QueryResult<AutoGeneratedRelationsQuery, AutoGeneratedRelationsQueryVariables>;
export const SaveDataSourceDocument = gql`
    mutation SaveDataSource($data: DataSourceInput!) {
  saveDataSource(data: $data) {
    type
    properties
  }
}
    `;
export type SaveDataSourceMutationFn = Apollo.MutationFunction<SaveDataSourceMutation, SaveDataSourceMutationVariables>;

/**
 * __useSaveDataSourceMutation__
 *
 * To run a mutation, you first call `useSaveDataSourceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSaveDataSourceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [saveDataSourceMutation, { data, loading, error }] = useSaveDataSourceMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useSaveDataSourceMutation(baseOptions?: Apollo.MutationHookOptions<SaveDataSourceMutation, SaveDataSourceMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SaveDataSourceMutation, SaveDataSourceMutationVariables>(SaveDataSourceDocument, options);
      }
export type SaveDataSourceMutationHookResult = ReturnType<typeof useSaveDataSourceMutation>;
export type SaveDataSourceMutationResult = Apollo.MutationResult<SaveDataSourceMutation>;
export type SaveDataSourceMutationOptions = Apollo.BaseMutationOptions<SaveDataSourceMutation, SaveDataSourceMutationVariables>;
export const SaveTablesDocument = gql`
    mutation SaveTables($data: SaveTablesInput!) {
  saveTables(data: $data)
}
    `;
export type SaveTablesMutationFn = Apollo.MutationFunction<SaveTablesMutation, SaveTablesMutationVariables>;

/**
 * __useSaveTablesMutation__
 *
 * To run a mutation, you first call `useSaveTablesMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSaveTablesMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [saveTablesMutation, { data, loading, error }] = useSaveTablesMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useSaveTablesMutation(baseOptions?: Apollo.MutationHookOptions<SaveTablesMutation, SaveTablesMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SaveTablesMutation, SaveTablesMutationVariables>(SaveTablesDocument, options);
      }
export type SaveTablesMutationHookResult = ReturnType<typeof useSaveTablesMutation>;
export type SaveTablesMutationResult = Apollo.MutationResult<SaveTablesMutation>;
export type SaveTablesMutationOptions = Apollo.BaseMutationOptions<SaveTablesMutation, SaveTablesMutationVariables>;
export const SaveRelationsDocument = gql`
    mutation SaveRelations($data: SaveRelationInput!) {
  saveRelations(data: $data)
}
    `;
export type SaveRelationsMutationFn = Apollo.MutationFunction<SaveRelationsMutation, SaveRelationsMutationVariables>;

/**
 * __useSaveRelationsMutation__
 *
 * To run a mutation, you first call `useSaveRelationsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSaveRelationsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [saveRelationsMutation, { data, loading, error }] = useSaveRelationsMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useSaveRelationsMutation(baseOptions?: Apollo.MutationHookOptions<SaveRelationsMutation, SaveRelationsMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SaveRelationsMutation, SaveRelationsMutationVariables>(SaveRelationsDocument, options);
      }
export type SaveRelationsMutationHookResult = ReturnType<typeof useSaveRelationsMutation>;
export type SaveRelationsMutationResult = Apollo.MutationResult<SaveRelationsMutation>;
export type SaveRelationsMutationOptions = Apollo.BaseMutationOptions<SaveRelationsMutation, SaveRelationsMutationVariables>;