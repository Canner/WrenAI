import { useState } from 'react';
import { omit } from 'lodash';
import { Button, Col, Popconfirm, Row, Space, Typography } from 'antd';
import type { ColumnsType } from 'antd/es/table';
import DeleteOutlined from '@ant-design/icons/DeleteOutlined';
import EditOutlined from '@ant-design/icons/EditOutlined';
import PlusOutlined from '@ant-design/icons/PlusOutlined';
import ModelRelationSelectionTable, {
  RelationsDataType,
} from '@/components/table/ModelRelationSelectionTable';
import { getJoinTypeText } from '@/utils/data';
import useModalAction from '@/hooks/useModalAction';
import RelationModal from '@/components/modals/AddRelationModal';

const { Title, Text } = Typography;

export interface SelectedRecommendRelations {
  [modelName: string]: RelationsDataType[];
}

interface Props {
  recommendRelations: SelectedRecommendRelations;
  onNext: (data: { relations: SelectedRecommendRelations }) => void;
  onBack: () => void;
  onSkip: () => void;
}

interface EditableRelationTableProps {
  index: number;
  modelName: string;
  onSetRelation: (payload: {
    modelName: string;
    defaultValue?: RelationsDataType;
  }) => void;
  onDeleteRow: (modelName: string, selectedRelation: RelationsDataType) => void;
  relations: RelationsDataType[];
}

function EditableRelationTable(props: EditableRelationTableProps) {
  const { index, modelName, onSetRelation, onDeleteRow, relations } = props;

  const columns: ColumnsType<RelationsDataType> = [
    {
      title: 'From',
      dataIndex: 'fromField',
      key: 'fromField',
      render: (fromField) => `${fromField.model}.${fromField.field}`,
      width: '35%',
    },
    {
      title: 'To',
      dataIndex: 'toField',
      key: 'toField',
      render: (toField) => `${toField.model}.${toField.field}`,
      width: '35%',
    },
    {
      title: 'Relation type',
      dataIndex: 'type',
      key: 'type',
      render: (type, relation) => (
        <>
          {getJoinTypeText(type)}
          {relation.isAutoGenerated && (
            <Text className="pl-1" type="secondary">
              (auto-generated)
            </Text>
          )}
        </>
      ),
      width: '30%',
    },
    {
      title: '',
      key: 'action',
      width: 48,
      align: 'center',
      render: (_, record) => (
        <Space size={[16, 0]}>
          <EditOutlined
            onClick={() =>
              onSetRelation({
                modelName,
                defaultValue: record,
              })
            }
          />
          <Popconfirm
            title="Sure to delete?"
            okText="Delete"
            okButtonProps={{ danger: true }}
            onConfirm={() => onDeleteRow(modelName, record)}
          >
            <DeleteOutlined />
          </Popconfirm>
        </Space>
      ),
    },
  ];

  return (
    <div className="mt-6">
      <ModelRelationSelectionTable
        columns={columns}
        dataSource={relations}
        tableTitle={modelName}
        extra={(onCollapseOpen) => (
          <Button
            onClick={(event) => {
              onSetRelation({ modelName });
              onCollapseOpen(event, modelName);
            }}
            size="small"
            title="Add relation"
          >
            <PlusOutlined />
            Add
          </Button>
        )}
        rowKey={(record: RelationsDataType) =>
          `${modelName}-${record.name}-${index}`
        }
      />
    </div>
  );
}

export default function DefineRelations(props: Props) {
  const { recommendRelations, onBack, onNext, onSkip } = props;

  const [relations, setRelations] =
    useState<SelectedRecommendRelations>(recommendRelations);

  const [selectedRelation, setSelectedRelation] = useState<{
    modelName: string;
    defaultValue?: RelationsDataType;
  }>(null);

  const relationModal = useModalAction();

  // check is the relation is auto-generated or not
  const isRecommendRelation = (
    modelName: string,
    relation: RelationsDataType,
  ) => {
    const isOriginalRelation = (recommendRelations[modelName] || []).find(
      (originalRelation) =>
        JSON.stringify(omit(originalRelation, ['name', 'isAutoGenerated'])) ===
        JSON.stringify(omit(relation, ['name', 'isAutoGenerated'])),
    );
    return isOriginalRelation?.isAutoGenerated || false;
  };

  const onAddRelation = (modelName: string, relation: RelationsDataType) => {
    const isAutoGenerated = isRecommendRelation(modelName, relation);
    const newRelations = {
      ...relations,
      [modelName]: [
        ...(relations[modelName] || []),
        { ...relation, isAutoGenerated },
      ],
    };
    setRelations(newRelations);
  };

  const onCloseModal = () => {
    setSelectedRelation(null);
    relationModal.closeModal();
  };

  const onDeleteRow = (
    modelName: string,
    selectedRelation: RelationsDataType,
  ) => {
    const newRelations = {
      ...relations,
      [modelName]: relations[modelName].filter(
        (relation) =>
          JSON.stringify(relation) !== JSON.stringify(selectedRelation),
      ),
    };
    setRelations(newRelations);
  };

  const onSetRelation = (payload: {
    modelName: string;
    defaultValue?: RelationsDataType;
  }) => {
    setSelectedRelation(payload);
    relationModal.openModal();
  };

  const onUpdateRelation = (
    modelName: string,
    originalRelationValue: RelationsDataType,
    newRelationValue: RelationsDataType,
  ) => {
    const isAutoGenerated = isRecommendRelation(modelName, newRelationValue);

    const newRelations = {
      ...relations,
      [modelName]: relations[modelName].map((relation) => {
        if (
          JSON.stringify(relation) === JSON.stringify(originalRelationValue)
        ) {
          return { ...newRelationValue, isAutoGenerated };
        }
        return relation;
      }),
    };
    setRelations(newRelations);
  };

  const submit = () => {
    onNext && onNext({ relations });
  };

  return (
    <div>
      <Title level={1} className="mb-3">
        Define relations
      </Title>
      <Text>
        You can define the relations among selected tables. We will
        automatically list suggested relations based on the primary and foreign
        key you have already defined in your data source. Relations will be
        added into data models.
      </Text>
      <div className="my-6">
        {Object.entries(relations).map(([modelName, relations = []], index) => (
          <EditableRelationTable
            key={`${modelName}-${relations.length}`}
            index={index}
            modelName={modelName}
            relations={relations}
            onSetRelation={onSetRelation}
            onDeleteRow={onDeleteRow}
          />
        ))}
      </div>
      <Row gutter={16} className="pt-6">
        <Col span={12}>
          <Button onClick={onBack} size="large" className="adm-onboarding-btn">
            Back
          </Button>
        </Col>
        <Col className="text-right" span={12}>
          <Button
            className="mr-4 gray-7 adm-onboarding-btn"
            type="text"
            size="large"
            onClick={onSkip}
          >
            Skip this step
          </Button>
          <Button
            type="primary"
            size="large"
            onClick={submit}
            className="adm-onboarding-btn"
          >
            Finish
          </Button>
        </Col>
      </Row>
      <RelationModal
        {...relationModal.state}
        model={selectedRelation?.modelName}
        onSubmit={async (values) => {
          if (selectedRelation?.defaultValue) {
            onUpdateRelation(
              selectedRelation.modelName,
              selectedRelation.defaultValue,
              values,
            );
          } else {
            onAddRelation(values.fromField.model, values);
          }
          setSelectedRelation(null);
        }}
        onClose={onCloseModal}
        defaultValue={
          selectedRelation?.defaultValue
            ? omit(selectedRelation.defaultValue, ['isAutoGenerated'])
            : undefined
        }
        relations={relations}
      />
    </div>
  );
}
