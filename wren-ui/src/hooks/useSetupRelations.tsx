import { useState } from 'react';
import { JOIN_TYPE, SETUP } from '@/utils/enum';
import { useRouter } from 'next/router';
import { SelectedRecommendRelations } from '@/components/pages/setup/DefineRelations';
import { Path } from '@/utils/enum';

export default function useSetupRelations() {
  const [stepKey] = useState(SETUP.DEFINE_RELATIONS);
  const router = useRouter();

  const submitReleations = async (_relations: SelectedRecommendRelations) => {
    // TODO: implement submitReleations API
    router.push(Path.Home);
  };

  const onBack = () => {
    router.push('/setup/models');
  };

  const onNext = (data: { relations: SelectedRecommendRelations }) => {
    submitReleations(data.relations);
  };

  const onSkip = () => router.push(Path.Home);

  const recommendRelations = recommendRelationsData.reduce(
    (acc, currentValue) => {
      const { name, relations } = currentValue;
      acc[name] = relations;
      return acc;
    },
    {},
  );

  return {
    stepKey,
    recommendRelations,
    onBack,
    onNext,
    onSkip,
  };
}

// TODO: remove it when connecting to backend
const recommendRelationsData = [
  {
    name: 'Customer',
    relations: [
      {
        name: 'Customer_Order',
        fromField: { model: 'Customer', field: 'custkey' },
        toField: { model: 'Orders', field: 'custkey' },
        type: JOIN_TYPE.ONE_TO_MANY,
        isAutoGenerated: true,
      },
      {
        name: 'Customer_trans',
        fromField: { model: 'Customer', field: 'custkey' },
        toField: { model: 'trans', field: 'custkey' },
        type: JOIN_TYPE.ONE_TO_MANY,
        isAutoGenerated: true,
      },
    ],
  },
  {
    name: 'Orders',
    relations: [
      {
        name: 'Orders_Lineitem',
        fromField: { model: 'Orders', field: 'orderkey' },
        toField: { model: 'Lineitem', field: 'orderkey' },
        type: JOIN_TYPE.ONE_TO_MANY,
        isAutoGenerated: true,
      },
    ],
  },
  {
    name: 'trans',
    relations: [],
  },
];
